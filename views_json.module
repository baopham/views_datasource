<?php
// $Id$

/**
 * @file
 * Module definition for views_json
 *
 * @see views_json.views.inc
 */


function views_json_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'views_json'),
  );
}

function views_json_theme() {
 $path = drupal_get_path('module', 'views_json') .'/theme';
 return array(
   'views_views_json_style' => array(
     'arguments' => array('view' => NULL, 'rows' => array(), 'attachment'=>NULL, 'options' => array()),
     'path' => $path,
     'file' => 'views_views_json_style.theme.inc',
   ),
   'views_views_json_style_simple' => array(
     'arguments' => array('view' => NULL, 'rows' => array(), 'attachment' => NULL, 'options'=>array()),  
     'path' => $path,
     'file' => 'views_views_json_style.theme.inc',
     'template' => 'views-views-json-style-simple'
   ),
   'views_views_json_style_exhibit' => array(
     'arguments' => array('view' => NULL, 'rows' => array(), 'attachment' => NULL, 'options'=>array()),  
     'path' => $path,
     'file' => 'views_views_json_style.theme.inc',
     'template' => 'views-views-json-style-exhibit'
   ),
 );
}

function _views_json_render_fields(&$view, $row) {
  $rendered_fields = array();
  $field_ids = array_keys($view->field);
  
  foreach ($field_ids as $id) {
    $field = &$view->field[$id];
    $field_output = $field->theme($row);
    if (empty($field->options['exclude'])) {
      $object = new stdClass();
      $object->id = $id;
      $object->content = $field_output;
      if (isset($view->field[$id]->field_alias) && isset($row->{$view->field[$id]->field_alias})) {
        $object->raw = $row->{$view->field[$id]->field_alias};
      }
      else {
        $object->raw = NULL; // make sure it exists to reduce NOTICE
      }
      $object->class = views_css_safe($id);
      $object->label = $view->field[$id]->label();
      $rendered_fields[$id] = $object;
    }
  }
  return $rendered_fields;
}
/**
 * Strips illegal characters for an identifier from a JSON string.
 *
 * @param $input
 *   Identifier string to process.
 * @return
 *   Identifier string with illegal characters stripped away.
 */
function _views_json_check_label($input) {
  $output = str_replace(array('{', '}', '[', ']', ':', ',', '"', "'", chr(47), chr(92)), '', $input);
  $output = preg_replace(
              '/[\x{80}-\x{A0}'.      // Non-printable ISO-8859-1 + NBSP
              '\x{01}-\x{1F}'.        // Non-printable ASCII characters
              '\x{0}]/u',             // NULL byte
            '', $output);

  return check_plain(strip_tags($output));
}


/**
 * Gets JSON data from a View rendered in the JSON data document style.
 *
 * This is useful for when working with a JSON view in code.
 *
 * @param $name
 *   The name of the view.
 * @param $display_id
 *   The display of the view to use.
 * @param $args
 *   The arguments to pass to the view.
 * @param $raw
 *   If TRUE, the JSON data is returned as a string.  Otherwise, an object
 *   representation is returned.
 * @return
 *   The JSON data in the form of an object or a string or NULL otherwise.
 */
function views_json_get($name, $display_id = 'default', $args = array(), $raw = FALSE) {
  $view = views_get_view($name);
  if (!is_object($view)) return NULL;

  $preview    = $view->preview($display_id, $args);
  $start_pos  = strpos($preview, '{');
  $finish_pos = strrpos($preview, '}');
  $length     = $finish_pos - $start_pos + 1;
  $json       = trim(substr($preview, $start_pos, $length));

  if ($raw) {
    return $json;
  }

  return json_decode($json);
}

/**
 * Render a view's output as JSON.
 *
 * The function will directly output a JSON string instead of returning it.
 *
 * @param $items
 *   The collection of items to encode into JSON.
 * @param $options
 *   Render options.
 */

/**
 * Encodes JSON in a pretty-printed fashion.
 */
function _views_json_encode_formatted($v, $depth = 0) {
  $base_indent  = '&nbsp;&nbsp;';
  $eol          = '<br />';
  $indent       = str_repeat($base_indent, $depth);

  // This is based on the drupal_to_js() function.
  switch (gettype($v)) {
    case 'boolean':
      // Lowercase is necessary!
      return $v ? 'true' : 'false';

    case 'integer':
    case 'double':
      return $v;

    case 'resource':
    case 'string':
      $search   = array('"', chr(92), chr(47), chr(8), chr(12), chr(13) . chr(10), chr(10), chr(13), chr(9));
      $replace  = array('\"', '\\', '\/', '\b', '\f', '\n', '\n', '\r', '\t');
      $output   = str_replace($search, $replace, $v);
/* *
      $output = str_replace(array("\r", "\n", "<", ">", "&"),
                           array('\r', '\n', '\x3c', '\x3e', '\x26'),
                           addslashes($output));
/* */
      return '"'. check_plain($output) .'"';

    case 'array':
      // Arrays in JSON can't be associative.  If the array is empty or if it
      // has sequential whole number keys starting with 0, it's not associative
      // so we can go ahead and convert it as an array.
      if (empty($v) || array_keys($v) === range(0, sizeof($v) - 1)) {
        $output = array();
        foreach ($v as $val) {
          $output[] = $indent . $base_indent . _views_json_encode_formatted($val, $depth + 1);
        }
        return '['. (!empty($output) ? $eol . implode(','. $eol, $output) . $eol . $indent : '') .']';
      }
      // Otherwise, fall through to convert the array as an object.

    case 'object':
      $output = array();
      foreach ($v as $key => $val) {
        $output[] = $indent . $base_indent . _views_json_encode_formatted(strval($key)) .' : '. _views_json_encode_formatted($val, $depth + 1);
      }
      return '{'. (!empty($output) ? $eol . implode(','. $eol, $output) . $eol . $indent : '') .'}';

    default:
      return 'null';
  }
}

function _views_json_debug_stop($var,$location) {
	print ("Location:$location\n");
	var_dump($var);
	module_Invoke_all('exit');
	exit;
}
