<?php
// $Id$

/**
 * @file
 * Module definition for views_json
 *
 * @see views_json.views.inc
 */


function views_json_views_api() {
  return array(
    'api' => '2.0',
//    'path' => drupal_get_path('module', 'views_json'),
  );
}


/**
 * Strips illegal characters for an identifier from a JSON string.
 *
 * @param $input
 *   Identifier string to process.
 * @return
 *   Identifier string with illegal characters stripped away.
 */
function views_json_check_label($input) {
  $output = str_replace(array('{', '}', '[', ']', ':', ',', '"', "'", chr(47), chr(92)), '', $input);
  $output = preg_replace(
              '/[\x{80}-\x{A0}'.      // Non-printable ISO-8859-1 + NBSP
              '\x{01}-\x{1F}'.        // Non-printable ASCII characters
              '\x{0}]/u',             // NULL byte
            '', $output);

  return check_plain(strip_tags($output));
}


/**
 * Gets JSON data from a View rendered in the JSON data document style.
 *
 * This is useful for when working with a JSON view in code.
 *
 * @param $name
 *   The name of the view.
 * @param $display_id
 *   The display of the view to use.
 * @param $args
 *   The arguments to pass to the view.
 * @param $raw
 *   If TRUE, the JSON data is returned as a string.  Otherwise, an object
 *   representation is returned.
 * @return
 *   The JSON data in the form of an object or a string or NULL otherwise.
 */
function views_json_get($name, $display_id = 'default', $args = array(), $raw = FALSE) {
  $view = views_get_view($name);
  if (!is_object($view)) return NULL;

  $preview    = $view->preview($display_id, $args);
  $start_pos  = strpos($preview, '{');
  $finish_pos = strrpos($preview, '}');
  $length     = $finish_pos - $start_pos + 1;
  $json       = trim(substr($preview, $start_pos, $length));

  if ($raw) {
    return $json;
  }

  return json_decode($json);
}
